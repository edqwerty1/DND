using DND.Domain.Entities;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DND.Domain.Concrete.EntityFramework
{
    /// <summary>
    /// Base Entity Framework mapping class for Insight domain entities. This class
    /// configures the attributes on the base entity and also properties on the specified
    /// domain entity type by looking at settings provided via the SymEntity attribute
    /// and properties specified by the Field Definitions for the class.
    /// </summary>
    /// <typeparam name="T">The type of the entity being mapped</typeparam>
    class BaseEntityMap<T> : EntityTypeConfiguration<T> where T : BaseEntity
    {
        /// <summary>
        /// Constructor creating the default mappings on all entities
        /// </summary>
        public BaseEntityMap()
        {
            // Note that it is not necessary to define properties as being required or optional. 
            // Entity framework automatically sets this up based on whether the required attribute 
            // has been set.

            // Define the primary key
            this.HasKey(t => t.Id);

            this.Property(c => c.Id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);


            //PropertyConfiguration Options
            //-----------------------------

            //HasColumnType	Configures the data type of the database column used to store the property.
            //HasMaxLength	Configures the property to have the specified maximum length.
            //IsFixedLength	Configures the property to be fixed length. Use HasMaxLength to set the length that the property is fixed to. - if min and max are the same...
            //HasPrecision	 (byte value)  - Yes for decimals   /TODO: Sensible defaults e.g. precision for doubles 9,4 (9 before, 4 after)  
            //IsMaxLength	Configures the property to allow the maximum length supported by the database provider.         


            //IsUnicode()	Configures the property to support Unicode string content. - Unlikely
            //IsUnicode(Nullable<Boolean>)	Configures whether or not the property supports Unicode string content. - Unlikely
            //HasParameterName	 (Inherited from PrimitivePropertyConfiguration.) - Unlikely
            //IsConcurrencyToken()	Configures the property to be used as an optimistic concurrency token. - Unlikely
            //IsConcurrencyToken(Nullable<Boolean>)	Configures whether or not the property is to be used as an optimistic concurrency token. - Unlikely
            //HasDatabaseGeneratedOption	Configures how values for the property are generated by the database. - Unlikely
            //HasColumnName	Configures the name of the database column used to store the property. - Unlikely
            //HasColumnOrder	Configures the order of the database column used to store the property. This method is also used to specify key ordering when an entity type has a composite key. - Unlikely

            //IsRequired	Configures the property to be required. The database column used to store this property will be non-nullable. - No
            //IsVariableLength	Configures the property to be variable length. string properties are variable length by default. - No
            //IsOptional	Configures the property to be optional. The database column used to store this property will be nullable. string properties are optional by default. - No
            //IsRowVersion - No
        }
        // Define relationships
    }
}
